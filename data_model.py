# generated by datamodel-codegen:
#   filename:  records.json
#   timestamp: 2022-11-28T19:29:02+00:00

from __future__ import annotations

from typing import Any, List, Optional

from pydantic import BaseModel, Field


class ModelItem(BaseModel):
    ToolModel__Name_Example: str = Field(..., alias="ToolModel_ Name Example")
    Component_: str
    Key_Application_s: str = Field(..., alias="Key Application_s")
    dimensions_: Any = Field(..., alias="dimensions?")
    Tool_or_model_type: Optional[str] = Field(..., alias="Tool or model type")
    Time_to_assemble__days_: Optional[str] = Field(..., alias="Time to assemble (days)")
    River_setting: Optional[str] = Field(..., alias="River setting")
    Key_flowpathnetworking_and_topobathy_needs: Optional[str] = Field(
        ..., alias="Key flowpathnetworking and topobathy needs"
    )
    Key_Flow_needs: Optional[str] = Field(..., alias="Key Flow needs")
    Types_of_oil: Optional[str] = Field(..., alias="Types of oil")
    Ice_interactions: Optional[str] = Field(..., alias="Ice interactions")
    Velocity_part_of_model_output_: str = Field(
        ..., alias="Velocity part of model output?"
    )
    Mapping__geospatialresolution_: Optional[str] = Field(
        ..., alias="Mapping, geospatialresolution_"
    )
    what_is_needed_to_run_the_model__Web_or_desktop_: Any = Field(
        ..., alias="what is needed to run the model? Web or desktop?"
    )
    Geographic_Extent_: str = Field(..., alias="Geographic Extent_")
    Visualization: Optional[str]
    Incorporate_tactics_: str = Field(..., alias="Incorporate tactics?")
    How_to_use_: str = Field(..., alias="How to use_")
    Limitations_: Optional[str]
    Web_site_reference: Optional[str] = Field(..., alias="Web site reference")
    Citation: Optional[str]
    Training_available: Optional[str] = Field(..., alias="Training available")
    Contact_: Optional[str]
    id: str


class Model(BaseModel):
    __root__: List[ModelItem]
